##开发环境配置
space.dyenigma.project=origin
space.dyenigma.path=E:/codeSpace/origin
space.dyenigma.publicKey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAIPeVXhDqMeMvCn1iwI8rI+1IAtTy//mzVsksMgQTSMUbvbnYzfI4rdPl8Y2Gfo+D4wpFzlu7vD7/fIfgxRfPpcCAwEAAQ==
space.dyenigma.password=QU3exs4dQ+5w0ocX4OMhstqqSPqzU2DW0h9AYwxdQAwWKe3CTsetJ947BDEwR41B4bT7RT5o/EcCLqhs51hzaA==
##常用配置
server.port=8080
#server.tomcat.basedir=/tmp
server.tomcat.uri-encoding=UTF-8
#最好不要配置server.context-path，会造成无尽的路径配置问题
#server.context-path=/origin
##日志级别
logging.level.root=info
spring.mvc.throw-exception-if-no-handler-found=true
##静态资源映射，默认为true
spring.resources.add-mappings=true
##Druid连接池配置（多数据源读写分离，下面的命名规律要和DynamicDataSourceRegister类中配合，不能乱改）
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
#主数据源写
spring.datasource.url=jdbc:mysql://localhost:3306/origin?characterEncoding=UTF-8
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=${space.dyenigma.password}
#多个[从数据源]读
spring.reader.names=slaveA,slaveB
spring.reader.slaveA.type=com.alibaba.druid.pool.DruidDataSource
spring.reader.slaveA.url=jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8
spring.reader.slaveA.driver-class-name=com.mysql.jdbc.Driver
spring.reader.slaveA.username=root
spring.reader.slaveA.password=${space.dyenigma.password}
spring.reader.slaveB.type=com.alibaba.druid.pool.DruidDataSource
spring.reader.slaveB.url=jdbc:mysql://localhost:3306/study?characterEncoding=UTF-8
spring.reader.slaveB.driver-class-name=com.mysql.jdbc.Driver
spring.reader.slaveB.username=root
spring.reader.slaveB.password=${space.dyenigma.password}
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 'x'
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防SQL注入防火墙,mergeStat为合并Sql统计
spring.datasource.filters=mergeStat,wall,config,slf4j
# 也可以在下面打开合并sql统计功能：druid.stat.mergeSql=true;slowSqlMillis慢SQL记录,config.decrypt=true为数据库密码加密，同时要加上key
spring.datasource.connectionProperties=config.decrypt=true;config.decrypt.key=${space.dyenigma.publicKey};druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
spring.datasource.useGlobalDataSourceStat=true
##Mybatis配置，注意classpath的路径一定要正确，可以有多个classpath，前面用横杠独立对待
mybatis.type-aliases-package=space.dyenigma.entity
mybatis.mapper-locations=classpath:mapper/*.xml
##分页插件配置
pagehelper.helperDialect=mysql
pagehelper.reasonable=true
pagehelper.supportMethodsArguments=true
pagehelper.params=count=countSql
##FreeMarker配置
spring.freemarker.allow-request-override=false
spring.freemarker.cache=false
spring.freemarker.check-template-location=true
spring.freemarker.charset=UTF-8
spring.freemarker.content-type=text/html
spring.freemarker.expose-request-attributes=false
spring.freemarker.expose-session-attributes=false
spring.freemarker.expose-spring-macro-helpers=false
#加上这一句就可以在ftl文件中使用${request.contextPath}了
spring.freemarker.request-context-attribute=request
spring.freemarker.settings.template_update_delay=0
spring.freemarker.settings.number_format=0.##########
spring.freemarker.settings.datetime_format=yyyy-MM-dd HH:mm:ss
spring.freemarker.settings.classic_compatible=true
spring.freemarker.settings.template_exception_handler=ignore
spring.freemarker.suffix=.ftl
spring.freemarker.templateEncoding=UTF-8
spring.freemarker.templateLoaderPath=classpath:/templates/
##Redis单机配置
spring.redis.database=0
spring.redis.host=localhost
spring.redis.port=6379
spring.redis.timeout=0
spring.redis.pool.max-idle=20
spring.redis.pool.min-idle=1
spring.redis.pool.max-active=8
spring.redis.pool.max-wait=-1
##Redis集群配置
#spring.redis.cluster.nodes=10.3.254.55:6379,10.3.254.55:6380,10.3.254.55:6381,10.3.254.54:6382,10.3.254.54:6383,10.3.254.54:6384